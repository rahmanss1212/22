// <auto-generated />
using System;
using Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Events.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220206080652_mn2")]
    partial class mn2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Events.Api.Models.APTs.APT", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("StatusId");

                    b.ToTable("Apts");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.AlternativeName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.ToTable("AlternativeName");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.AttackStratigie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.ToTable("AttackStratigie");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommentString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.CommentAttachment", b =>
                {
                    b.Property<long>("commentId")
                        .HasColumnType("bigint");

                    b.Property<long>("attachmentId")
                        .HasColumnType("bigint");

                    b.HasKey("commentId", "attachmentId");

                    b.HasIndex("attachmentId");

                    b.ToTable("CommentAttachment");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.CompanyName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.ToTable("CompanyName");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.ThreatSignature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.ToTable("ThreatSignature");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.ToolName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.ToTable("ToolName");
                });

            modelBuilder.Entity("Events.Api.Models.General.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is64base")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Events.Api.Models.General.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contenant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Events.Api.Models.General.New", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("UrganceyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<int>("depId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("publish")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UrganceyId");

                    b.HasIndex("UsersId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Events.Api.Models.General.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Orgname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<long?>("SectorId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SectorId1");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Events.Api.Models.General.ReportAttachment", b =>
                {
                    b.Property<long>("attachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("closeReportId")
                        .HasColumnType("bigint");

                    b.HasKey("attachmentId", "closeReportId");

                    b.HasIndex("closeReportId");

                    b.ToTable("ReportAttachment");
                });

            modelBuilder.Entity("Events.Api.Models.General.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Events.Api.Models.General.Urgancey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Urganceys");
                });

            modelBuilder.Entity("Events.Api.Models.Incidents.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("label")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Events.Api.Models.Incidents.Ip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("port")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ip");
                });

            modelBuilder.Entity("Events.Api.Models.Incidents.IpAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AptGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BeginTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DestId")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<string>("IntrusionSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHandeled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKnown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequestVarify")
                        .HasColumnType("bit");

                    b.Property<long?>("OwnerDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("SignatureClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("TotalHits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("OwnerDetailId");

                    b.HasIndex("SourceId");

                    b.ToTable("IpAddress");
                });

            modelBuilder.Entity("Events.Api.Models.Incidents.Saverity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lable")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Saverities");
                });

            modelBuilder.Entity("Events.Api.Models.Tasks.CloseReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("reportId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.ToTable("CloseReports");
                });

            modelBuilder.Entity("Events.Api.Models.UserManagement.EUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssignedHead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssignedSubeHead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubHead")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SectionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Events.Core.Models.APTs.AptAttachment", b =>
                {
                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("APTId")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId", "APTId");

                    b.HasIndex("APTId");

                    b.ToTable("AptAttachment");
                });

            modelBuilder.Entity("Events.Core.Models.APTs.OriginCountry", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("APTId")
                        .HasColumnType("bigint");

                    b.HasKey("CountryId", "APTId");

                    b.HasIndex("APTId");

                    b.ToTable("OriginCountry");
                });

            modelBuilder.Entity("Events.Core.Models.APTs.TargetedCountry", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("APTId")
                        .HasColumnType("bigint");

                    b.HasKey("CountryId", "APTId");

                    b.HasIndex("APTId");

                    b.ToTable("TargetedCountry");
                });

            modelBuilder.Entity("Events.Core.Models.APTs.TargetedSector", b =>
                {
                    b.Property<long>("SectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("AptId")
                        .HasColumnType("bigint");

                    b.HasKey("SectorId", "AptId");

                    b.HasIndex("AptId");

                    b.ToTable("TargetedSector");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.AssessmentMethodology", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentMethodologies");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.AssessmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentTypes");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AssessmentMethodologyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachmentReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactedPersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraNote1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadDirections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformingBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InformingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformingNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodOfInforming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentMethodologyId");

                    b.HasIndex("AttachmentReportId");

                    b.HasIndex("ContactedPersonId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("DPEs");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPEAttachment", b =>
                {
                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("DPEId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VulnerabilityId")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId", "DPEId");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("DPEAttachment");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPEWorkTeam", b =>
                {
                    b.Property<long?>("EUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DpeId")
                        .HasColumnType("bigint");

                    b.HasKey("EUserId", "DpeId");

                    b.HasIndex("DpeId");

                    b.ToTable("DPEWorkTeam");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.Exploit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CVE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descriptin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SeverityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("SeverityId");

                    b.ToTable("Exploits");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.ExploitAffectedSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ExploitIpTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VulnerabilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExploitIpTypeId");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("ExploitAffectedSources");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.ExploitIpType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExploitIpTypes");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.ExploitSeverity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExploitSeveritys");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.VerificationPossibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VerificationPossibilities");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.Vulnerability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AssessmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysToFix")
                        .HasColumnType("int");

                    b.Property<long?>("DpeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExploitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExtraNote1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("OrgReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("TcReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("evidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("hasTested")
                        .HasColumnType("bit");

                    b.Property<string>("report")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DpeId");

                    b.HasIndex("ExploitId");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("StatusId");

                    b.ToTable("Vulnerabilities");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.VulnerabilityVerificationPossibilities", b =>
                {
                    b.Property<long?>("VerificationPossibilityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VulnerabilityId")
                        .HasColumnType("bigint");

                    b.HasKey("VerificationPossibilityId", "VulnerabilityId");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("VulnerabilityVerificationPossibilities");
                });

            modelBuilder.Entity("Events.Core.Models.Employees.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Events.Core.Models.General.ChangeLogField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChangeLogId")
                        .HasColumnType("bigint");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeLogId");

                    b.ToTable("ChangeLogField");
                });

            modelBuilder.Entity("Events.Core.Models.General.EntityAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHandeled")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IncidentId");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityAssignments");
                });

            modelBuilder.Entity("Events.Core.Models.General.EntityStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("EntityStatus");
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationContacts");
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationDomains");
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationIps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrgId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationIp");
                });

            modelBuilder.Entity("Events.Core.Models.General.Sector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Events.Core.Models.General.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Events.Core.Models.General.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("aptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("incidentId")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("taskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GeneralReportId");

                    b.HasIndex("aptId");

                    b.HasIndex("incidentId");

                    b.HasIndex("taskId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CloseReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraNote3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IncidentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsIpsIdentificationRequested")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SaverityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UrganceyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AptId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CloseReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IncidentCategoryId");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("SaverityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UrganceyId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.IncidentAttachment", b =>
                {
                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("IncidentId")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId", "IncidentId");

                    b.HasIndex("IncidentId");

                    b.ToTable("IncidentAttachment");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.IncidentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IncidentCategories");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.IncidentComment", b =>
                {
                    b.Property<long?>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.HasKey("IncidentId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("IncidentsComments");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.OrgsIncidentRel", b =>
                {
                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("IncidentId")
                        .HasColumnType("bigint");

                    b.HasKey("OrganizationId", "IncidentId");

                    b.HasIndex("IncidentId");

                    b.ToTable("OrgsIncidentRel");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.OwnerDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ownerSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ownerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subsId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OwnerDetails");
                });

            modelBuilder.Entity("Events.Core.Models.Logging.ChangeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("APTId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BlogNewsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CloseReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DPEId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntityAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExploitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GReportEntityAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskEntityAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VulnerabilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("changeDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("changedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("APTId");

                    b.HasIndex("BlogNewsId");

                    b.HasIndex("CloseReportId");

                    b.HasIndex("CommentId");

                    b.HasIndex("DPEId");

                    b.HasIndex("EntityAssignmentId");

                    b.HasIndex("ExploitId");

                    b.HasIndex("GReportEntityAssignmentId");

                    b.HasIndex("GeneralReportId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("TaskEntityAssignmentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VulnerabilityId");

                    b.HasIndex("changedById");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("Events.Core.Models.Logging.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserNameId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserNameId");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("Events.Core.Models.NewsBlog.BlogNews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NewsCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("BlogNews");
                });

            modelBuilder.Entity("Events.Core.Models.NewsBlog.BlogNewsCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogNewsCategory");
                });

            modelBuilder.Entity("Events.Core.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<long>("ParentEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParentEntityType")
                        .HasColumnType("int");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StatusId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Events.Core.Models.NotificationOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<long?>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastupdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("employeeId");

                    b.ToTable("NotificationOwner");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GReportEntityAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralReportId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHandeled")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GeneralReportId");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("GReportEntityAssignment");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GeneralReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ReportCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SaverityId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UrganceyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SaverityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UrganceyId");

                    b.ToTable("GeneralReports");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GeneralReportAttachment", b =>
                {
                    b.Property<long>("GeneralReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.HasKey("GeneralReportId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("GeneralReportAttachment");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.ReportCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategories");
                });

            modelBuilder.Entity("Events.Core.Models.StaticIP.StaticIP", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StaticIPs");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Assigned_forId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosingReportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DueDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncident")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentIncidentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Urgent")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Assigned_forId");

                    b.HasIndex("ClosingReportId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("ParentIncidentId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskAttachments", b =>
                {
                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAttachments");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskComment", b =>
                {
                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.HasKey("TaskId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskEmpsRel", b =>
                {
                    b.Property<long?>("EUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("EUserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEmpsRel");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskEntityAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHandled")
                        .HasColumnType("bit");

                    b.Property<long?>("LastUpdateById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdateById");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskEntityAssignments");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskType");
                });

            modelBuilder.Entity("Events.Core.Models.UserManagement.ERole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("sectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("sectionId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.APT", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.AlternativeName", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("AlternativeNames")
                        .HasForeignKey("APTId");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.AttackStratigie", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("AttackStratigies")
                        .HasForeignKey("APTId");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.Comment", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.Comment", null)
                        .WithMany("Replaies")
                        .HasForeignKey("CommentId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.CommentAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "attachment")
                        .WithMany("commentAttachments")
                        .HasForeignKey("attachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.APTs.Comment", "comment")
                        .WithMany("Attachments")
                        .HasForeignKey("commentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Api.Models.APTs.CompanyName", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("CompanyNames")
                        .HasForeignKey("APTId");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.Content", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("Contents")
                        .HasForeignKey("APTId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Api.Models.APTs.ThreatSignature", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("ThreatSignatures")
                        .HasForeignKey("APTId");
                });

            modelBuilder.Entity("Events.Api.Models.APTs.ToolName", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("ToolsNames")
                        .HasForeignKey("APTId");
                });

            modelBuilder.Entity("Events.Api.Models.General.New", b =>
                {
                    b.HasOne("Events.Api.Models.General.Urgancey", "Urgancey")
                        .WithMany()
                        .HasForeignKey("UrganceyId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Events.Api.Models.General.Organization", b =>
                {
                    b.HasOne("Events.Core.Models.General.Sector", "Sector")
                        .WithMany("Organizations")
                        .HasForeignKey("SectorId1");
                });

            modelBuilder.Entity("Events.Api.Models.General.ReportAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "attachment")
                        .WithMany("reportAttachmanet")
                        .HasForeignKey("attachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.Tasks.CloseReport", "closeReport")
                        .WithMany("attachments")
                        .HasForeignKey("closeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Api.Models.General.Section", b =>
                {
                    b.HasOne("Events.Core.Models.Employees.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Events.Api.Models.Incidents.IpAddress", b =>
                {
                    b.HasOne("Events.Api.Models.Incidents.Ip", "Dest")
                        .WithMany()
                        .HasForeignKey("DestId");

                    b.HasOne("Events.Core.Models.Incidents.Incident", null)
                        .WithMany("IpAddresses")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Incidents.OwnerDetails", "OwnerDetail")
                        .WithMany()
                        .HasForeignKey("OwnerDetailId");

                    b.HasOne("Events.Api.Models.Incidents.Ip", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");
                });

            modelBuilder.Entity("Events.Api.Models.Tasks.CloseReport", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");
                });

            modelBuilder.Entity("Events.Api.Models.UserManagement.EUser", b =>
                {
                    b.HasOne("Events.Api.Models.General.Organization", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Events.Api.Models.General.Section", "Section")
                        .WithMany("Users")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("Events.Core.Models.APTs.AptAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", "Apt")
                        .WithMany("Attachments")
                        .HasForeignKey("APTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.General.Attachment", "Attachment")
                        .WithMany("aptAttachment")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.APTs.OriginCountry", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", "Apt")
                        .WithMany("Origin")
                        .HasForeignKey("APTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.General.Country", "Country")
                        .WithMany("Origin")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.APTs.TargetedCountry", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", "Apt")
                        .WithMany("Targeted")
                        .HasForeignKey("APTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.General.Country", "Country")
                        .WithMany("Targeted")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.APTs.TargetedSector", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", "Apt")
                        .WithMany("TargetSectorNames")
                        .HasForeignKey("AptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.General.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPE", b =>
                {
                    b.HasOne("Events.Core.Models.DPE.AssessmentMethodology", "AssessmentMethodology")
                        .WithMany()
                        .HasForeignKey("AssessmentMethodologyId");

                    b.HasOne("Events.Api.Models.General.Attachment", "AttachmentReport")
                        .WithMany()
                        .HasForeignKey("AttachmentReportId");

                    b.HasOne("Events.Core.Models.General.OrganizationContact", "ContactedPerson")
                        .WithMany()
                        .HasForeignKey("ContactedPersonId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Api.Models.General.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPEAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.DPE.Vulnerability", "Vulnerability")
                        .WithMany("EvidenceAttachment")
                        .HasForeignKey("VulnerabilityId");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.DPEWorkTeam", b =>
                {
                    b.HasOne("Events.Core.Models.DPE.DPE", "Dpe")
                        .WithMany("DpeWorkTeam")
                        .HasForeignKey("DpeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "EUser")
                        .WithMany("DpeWorkTeam")
                        .HasForeignKey("EUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.DPE.Exploit", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.DPE.ExploitSeverity", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.ExploitAffectedSource", b =>
                {
                    b.HasOne("Events.Core.Models.DPE.ExploitIpType", "ExploitIpType")
                        .WithMany()
                        .HasForeignKey("ExploitIpTypeId");

                    b.HasOne("Events.Core.Models.DPE.Vulnerability", null)
                        .WithMany("AffectedSource")
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.DPE.Vulnerability", b =>
                {
                    b.HasOne("Events.Core.Models.DPE.AssessmentType", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Core.Models.DPE.DPE", null)
                        .WithMany("Vulnerability")
                        .HasForeignKey("DpeId");

                    b.HasOne("Events.Core.Models.DPE.Exploit", "Exploit")
                        .WithMany()
                        .HasForeignKey("ExploitId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Events.Core.Models.DPE.VulnerabilityVerificationPossibilities", b =>
                {
                    b.HasOne("Events.Core.Models.DPE.VerificationPossibility", "VerificationPossibility")
                        .WithMany()
                        .HasForeignKey("VerificationPossibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.DPE.Vulnerability", "Vulnerability")
                        .WithMany("VulnerabilityVerificationPossibilities")
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.General.ChangeLogField", b =>
                {
                    b.HasOne("Events.Core.Models.Logging.ChangeLog", null)
                        .WithMany("fields")
                        .HasForeignKey("ChangeLogId");
                });

            modelBuilder.Entity("Events.Core.Models.General.EntityAssignment", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Core.Models.Incidents.Incident", null)
                        .WithMany("Assignments")
                        .HasForeignKey("IncidentId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.General.EntityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Events.Core.Models.General.EntityStatus", b =>
                {
                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationContact", b =>
                {
                    b.HasOne("Events.Api.Models.General.Organization", "Organization")
                        .WithMany("OrganizationContact")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationDomain", b =>
                {
                    b.HasOne("Events.Api.Models.General.Organization", null)
                        .WithMany("DomaniName")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Events.Core.Models.General.OrganizationIps", b =>
                {
                    b.HasOne("Events.Api.Models.General.Organization", null)
                        .WithMany("Ips")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Events.Core.Models.General.Tag", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.Comment", null)
                        .WithMany("Tags")
                        .HasForeignKey("CommentId");

                    b.HasOne("Events.Core.Models.Reports.GeneralReport", null)
                        .WithMany("Tags")
                        .HasForeignKey("GeneralReportId");

                    b.HasOne("Events.Api.Models.APTs.APT", "apt")
                        .WithMany()
                        .HasForeignKey("aptId");

                    b.HasOne("Events.Core.Models.Incidents.Incident", "incident")
                        .WithMany("Tags")
                        .HasForeignKey("incidentId");

                    b.HasOne("Events.Core.Models.Tasks.Task", "task")
                        .WithMany()
                        .HasForeignKey("taskId");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.Incident", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", "Apt")
                        .WithMany()
                        .HasForeignKey("AptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.Incidents.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Events.Api.Models.Tasks.CloseReport", "CloseReport")
                        .WithMany()
                        .HasForeignKey("CloseReportId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Core.Models.Incidents.IncidentCategory", "IncidentCategory")
                        .WithMany()
                        .HasForeignKey("IncidentCategoryId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Api.Models.Incidents.Saverity", "Saverity")
                        .WithMany()
                        .HasForeignKey("SaverityId");

                    b.HasOne("Events.Core.Models.General.EntityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Events.Api.Models.General.Urgancey", "Urgancey")
                        .WithMany()
                        .HasForeignKey("UrganceyId");
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.IncidentAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "Attachment")
                        .WithMany("incidentAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Incidents.Incident", "Incident")
                        .WithMany("Attachments")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.IncidentComment", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.Comment", "Comment")
                        .WithMany("IncidentComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Incidents.Incident", "incident")
                        .WithMany("Comments")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Incidents.OrgsIncidentRel", b =>
                {
                    b.HasOne("Events.Core.Models.Incidents.Incident", "Incident")
                        .WithMany("Orgs")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.General.Organization", "Organization")
                        .WithMany("Incidents")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Logging.ChangeLog", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.APT", null)
                        .WithMany("Changes")
                        .HasForeignKey("APTId");

                    b.HasOne("Events.Core.Models.NewsBlog.BlogNews", null)
                        .WithMany("Changes")
                        .HasForeignKey("BlogNewsId");

                    b.HasOne("Events.Api.Models.Tasks.CloseReport", null)
                        .WithMany("Changes")
                        .HasForeignKey("CloseReportId");

                    b.HasOne("Events.Api.Models.APTs.Comment", null)
                        .WithMany("Changes")
                        .HasForeignKey("CommentId");

                    b.HasOne("Events.Core.Models.DPE.DPE", null)
                        .WithMany("Changes")
                        .HasForeignKey("DPEId");

                    b.HasOne("Events.Core.Models.General.EntityAssignment", null)
                        .WithMany("Changes")
                        .HasForeignKey("EntityAssignmentId");

                    b.HasOne("Events.Core.Models.DPE.Exploit", null)
                        .WithMany("Changes")
                        .HasForeignKey("ExploitId");

                    b.HasOne("Events.Core.Models.Reports.GReportEntityAssignment", null)
                        .WithMany("Changes")
                        .HasForeignKey("GReportEntityAssignmentId");

                    b.HasOne("Events.Core.Models.Reports.GeneralReport", null)
                        .WithMany("Changes")
                        .HasForeignKey("GeneralReportId");

                    b.HasOne("Events.Core.Models.Incidents.Incident", null)
                        .WithMany("Changes")
                        .HasForeignKey("IncidentId");

                    b.HasOne("Events.Core.Models.Tasks.TaskEntityAssignment", null)
                        .WithMany("Changes")
                        .HasForeignKey("TaskEntityAssignmentId");

                    b.HasOne("Events.Core.Models.Tasks.Task", null)
                        .WithMany("Changes")
                        .HasForeignKey("TaskId");

                    b.HasOne("Events.Core.Models.DPE.Vulnerability", null)
                        .WithMany("Changes")
                        .HasForeignKey("VulnerabilityId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "changedBy")
                        .WithMany()
                        .HasForeignKey("changedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Logging.UserActivity", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "UserName")
                        .WithMany()
                        .HasForeignKey("UserNameId");
                });

            modelBuilder.Entity("Events.Core.Models.NewsBlog.BlogNews", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.NewsBlog.BlogNewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId");
                });

            modelBuilder.Entity("Events.Core.Models.Notification", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Events.Core.Models.NotificationOwner", b =>
                {
                    b.HasOne("Events.Core.Models.Notification", null)
                        .WithMany("NotificationOwners")
                        .HasForeignKey("NotificationId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "employee")
                        .WithMany()
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GReportEntityAssignment", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Core.Models.Reports.GeneralReport", null)
                        .WithMany("Assignments")
                        .HasForeignKey("GeneralReportId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GeneralReport", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.Reports.ReportCategory", "ReportCategory")
                        .WithMany()
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.Incidents.Saverity", "Saverity")
                        .WithMany()
                        .HasForeignKey("SaverityId");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.General.Urgancey", "Urgancey")
                        .WithMany()
                        .HasForeignKey("UrganceyId");
                });

            modelBuilder.Entity("Events.Core.Models.Reports.GeneralReportAttachment", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "Attachment")
                        .WithMany("generalReportAttachment")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Reports.GeneralReport", "GeneralReport")
                        .WithMany("Attachments")
                        .HasForeignKey("GeneralReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.Task", b =>
                {
                    b.HasOne("Events.Api.Models.General.Section", "Assigned_for")
                        .WithMany("Tasks")
                        .HasForeignKey("Assigned_forId");

                    b.HasOne("Events.Api.Models.Tasks.CloseReport", "ClosingReport")
                        .WithMany()
                        .HasForeignKey("ClosingReportId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.Incidents.Incident", "ParentIncident")
                        .WithMany()
                        .HasForeignKey("ParentIncidentId");

                    b.HasOne("Events.Core.Models.Tasks.Task", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Events.Core.Models.General.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Tasks.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId");
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskAttachments", b =>
                {
                    b.HasOne("Events.Api.Models.General.Attachment", "attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Tasks.Task", "task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskComment", b =>
                {
                    b.HasOne("Events.Api.Models.APTs.Comment", "Comment")
                        .WithMany("TaskComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Tasks.Task", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskEmpsRel", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "EUser")
                        .WithMany("Tasks")
                        .HasForeignKey("EUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Core.Models.Tasks.Task", "Task")
                        .WithMany("AssignedEmps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Core.Models.Tasks.TaskEntityAssignment", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "LastUpdateBy")
                        .WithMany()
                        .HasForeignKey("LastUpdateById");

                    b.HasOne("Events.Core.Models.General.EntityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Events.Core.Models.Tasks.Task", null)
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId");

                    b.HasOne("Events.Api.Models.UserManagement.EUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Events.Core.Models.UserManagement.ERole", b =>
                {
                    b.HasOne("Events.Api.Models.General.Section", "section")
                        .WithMany()
                        .HasForeignKey("sectionId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Events.Core.Models.UserManagement.ERole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Events.Core.Models.UserManagement.ERole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Api.Models.UserManagement.EUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Events.Api.Models.UserManagement.EUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
